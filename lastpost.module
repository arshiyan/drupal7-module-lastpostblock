<?php

function lastpost_help($path, $arg)
{
	if($path == 'admin/help#lastpost')
	{
		$output = '<h3>' . t('About') . '</h3>';
		$output .= '<p>' . t('The shownodes module allows the Administrator to display various types of nodes as a block on your Drupal site.') . '</p>';
		return $output;
	}
}

function lastpost_menu()
{
	$items['admin/config/lastpost'] = array(
		'title'           => t('Choose the nodes to show'),
		'description'     => t('You can select which node types you want to show'),
		'page callback'   => 'system_admin_menu_block_page',
		'access arguments' => array('administer site configuration'),
		'file'            => 'system.admin.inc',
		'file path'       => drupal_get_path('module', 'system'),
	);

	$items['admin/config/lastpost/settings'] = array(
		'title'           => t('Choose the nodes to show'),
		'description'     => t('You can select which node types you want to show'),
		'page callback'   => 'drupal_get_form',
		'page arguments'         => array('lastpost_admin_settings'),
		'access arguments' => array('administer site configuration'),
		'type'            => MENU_NORMAL_ITEM,
	);

	return $items;
}

function lastpost_admin_settings()
{

	$types = node_type_get_types();
	foreach($types as $node_type)
	{
		$nodetypes[$node_type->type] = $node_type->name;
	}

	$form['lastpost_nodes_toshow'] = array(
		'#type'         => 'checkboxes',
		'#title'        => t('Select the nodes to show'),
		'#options'      => $nodetypes,
		'#default_value'=> variable_get('lastpost_nodes_toshow', array('')),
		'#description'  => t('All the node types selected below will be shown'),
	);

	$nodeplayanim = array("1"=>"yes");
	$form['lastpost_nodes_link'] = array(
		'#type'         => 'checkboxes',
		'#title'        => t('display with link'),
		'#options'      => $nodeplayanim,
		'#default_value'=> variable_get('lastpost_nodes_link', array('')),
		'#description'  => t('display last post with link'),
	);
	
	
	return system_settings_form($form);
}


/**
* Implements hook_block_info().
*/
function lastpost_block_info()
{
	$blocks = array();

	$blocks['displaynodeblock'] = array(
		'info'=> t('A block to show selected nodes'),
	);

	return $blocks;
}

/**
* Implements hook_block_view().
*/
function lastpost_block_view($block_name = '')
{

	switch($block_name)
	{
		case 'displaynodeblock':
		$block = array(
			'subject'=> t('last post'),
			'content'=> get_last_post(),
		);
		break;
	}



	return $block;

}

function get_last_post()
{
	//Get the selected node types and create a list of them
	$show_nodes_list = array();
	$show_nodes_array = variable_get('lastpost_nodes_toshow', array(''));
	$show_nodes_link = variable_get('lastpost_nodes_link', array(''));
	foreach($show_nodes_array as $key => $value)
	{
		if($value)
		{
			array_push($show_nodes_list,$value);
		}
	}

	//Based on the node types create a query and then load the node types
	$query = new EntityFieldQuery();
	$query
	->entityCondition('entity_type', 'node')
	->entityCondition('bundle', $show_nodes_list)
	->propertyCondition('status', 1)
	->propertyOrderBy('created', 'DESC');

	$result= $query->execute();
	$nodes = array();
	if(isset($result['node']))
	{
		$nids = array_keys($result['node']);
		$nodes= node_load_multiple($nids);
	}

	//Loop through the loded nodes to create a list
	//Which we will pass to the theme
	$list = array();
	foreach($nodes as $node)
	{
		$options = array('absolute'=> TRUE);
		$url = url('node/' . $node->nid, $options);
		if(isset($show_nodes_link) && in_array(1,$show_nodes_link))
		{
			$list[] = '<a href="'.$url.'" >'.$node->title.'</a>';
		}
		else
		{
			$list[] = ''.$node->title.'';
		}

	}

	//Return the content of the block
	$theme_args = array('items'=> $list,'type' => 'ol');
	$content = theme('item_list', $theme_args);

	return $content;
}